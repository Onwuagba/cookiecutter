# To use this, create gitlab variables in your project repo settings matching below:
# $DEPLOYMENT_USER -> server user
# $DEPLOYMENT_SERVER -> server
# $DEPLOYMENT_PORT -> port
# Use test environment credentials ooo... if you use production, that one na your concern

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG

before_script:
  - echo "Building the Docker image"

test:
  stage: test
  image: python:3.9
  script:
    - pip install -r requirements.txt
    - python manage.py test

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    - TARBALL="{{ cookiecutter.project_slug }}_${TIMESTAMP}.tar"
    - echo "TARBALL=$TARBALL" >> build.env
    - echo "Building Docker image..."
    - docker build -t $DOCKER_IMAGE .
    - echo "Saving Docker image to $TARBALL..."
    - docker save $DOCKER_IMAGE > $TARBALL
    - echo "Tarball created at $TARBALL"
    - ls -l $TARBALL  # Check if the file exists and its size
  artifacts:
    paths:
      - "{{ cookiecutter.project_slug }}_*.tar"
    reports:
      dotenv: build.env
  only:
    - develop

deploy:
  stage: deploy
  script:
    - echo "Tarball for build is $TARBALL"
    - if [ -z "$TARBALL" ]; then echo "TARBALL is not set"; exit 1; fi
    - if [ ! -f "$TARBALL" ]; then echo "TARBALL file not found"; exit 1; fi
    - scp "$TARBALL" $DEPLOYMENT_USER@$DEPLOYMENT_SERVER:/home/admin/docker_images/
    - ssh $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "docker load < /home/admin/docker_images/$(basename $TARBALL)"
    - |
      ssh $DEPLOYMENT_USER@$DEPLOYMENT_SERVER '
        docker run -d --name {{ cookiecutter.project_slug }} \
          -p $DEPLOYMENT_PORT:$DEPLOYMENT_PORT \
          -e DJANGO_SETTINGS_MODULE={{ cookiecutter.project_slug }}.settings \
          $DOCKER_IMAGE \
          gunicorn {{ cookiecutter.project_slug }}.wsgi:application \
          --bind 0.0.0.0:$DEPLOYMENT_PORT \
          --workers 3 \
          --log-level info
      '
  only:
    - develop

check_docs:
  stage: test
  script:
    - curl -f http://localhost:$DEPLOYMENT_PORT/docs || echo "Docs page accessible! Disabling..."
  only:
    - main
